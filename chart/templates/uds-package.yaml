# Copyright 2024 Defense Unicorns
# SPDX-License-Identifier: AGPL-3.0-or-later OR LicenseRef-Defense-Unicorns-Commercial

apiVersion: uds.dev/v1alpha1
kind: Package
metadata:
  name: sonarqube
  namespace: {{ .Release.Namespace }}
spec:
  {{- if .Values.sso.enabled }}
  sso:
    - name: SonarQube Login
      clientId: uds-swf-sonarqube
      redirectUris:
        - "https://sonarqube.{{ .Values.domain }}/oauth2/callback/saml"
      protocol: saml
      defaultClientScopes:
        - "mapper-saml-email-email"
        - "mapper-saml-username-login"
        - "mapper-saml-username-name"

      attributes:
        saml.client.signature: "false"

      secretName: {{ .Values.sso.secretName }}
      # This secret template configures the sonarqube saml support documented here: https://docs.sonarsource.com/sonarqube/latest/instance-administration/authentication/saml/overview/
      secretTemplate:
        secret.properties: |
            sonar.auth.saml.enabled: {{ .Values.sso.enabled }}
            sonar.core.serverBaseURL: https://sonarqube.{{ .Values.domain }}
            sonar.auth.saml.applicationId: clientField(clientId)
            sonar.auth.saml.providerName: {{ .Values.sso.saml.providerName }}
            sonar.auth.saml.providerId: https://sso.{{ .Values.domain }}/realms/uds
            sonar.auth.saml.loginUrl: https://sso.{{ .Values.domain }}/realms/uds/protocol/saml
            sonar.auth.saml.user.login: login
            sonar.auth.saml.user.name: name
            sonar.auth.saml.user.email: email
            sonar.auth.saml.certificate.secured: clientField(samlIdpCertificate)
  {{- end }}
  monitor:
    - portName: http
      targetPort: 9000
      selector:
        app: sonarqube
      kind: PodMonitor
      path: /api/monitoring/metrics
      authorization:
        credentials:
          name: sonarqube-monitoring
          key: passcode
          optional: false
        type: "Bearer"
  network:
    expose:
      - service: sonarqube-sonarqube
        podLabels:
          app: sonarqube
        gateway: tenant
        host: sonarqube
        port: 9000
    allow:
      - direction: Egress
        remoteNamespace: keycloak
        remoteSelector:
          app.kubernetes.io/name: keycloak
        selector:
          app: sonarqube
        port: 8080
        description: "SSO Internal"

      - direction: Egress
        remoteNamespace: istio-tenant-gateway
        remoteSelector:
          app: tenant-ingressgateway
        selector:
          app: sonarqube
        port: 443
        description: "SSO External"

      - direction: Egress
        selector:
          app: sonarqube
        {{- if .Values.postgres.internal }}
        remoteNamespace: {{ .Values.postgres.namespace | quote }}
        remoteSelector:
          {{ .Values.postgres.selector | toYaml | nindent 10 }}
        port: {{ .Values.postgres.port }}
        {{- else }}
        remoteGenerated: Anywhere
        {{- end }}
        description: "Sonarqube Postgres"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: sonarqube
        port: 8000
        description: "Web Bean Monitor"

      - direction: Ingress
        remoteNamespace: monitoring
        remoteSelector:
          app: prometheus
        selector:
          app: sonarqube
        port: 8001
        description: "CE Bean Monitor"

      # Custom rules for unanticipated scenarios
      {{- range .Values.custom }}
      - direction: {{ .direction }}
        selector:
          {{ .selector | toYaml | nindent 10 }}
        {{- if not .remoteGenerated }}
        remoteNamespace: {{ .remoteNamespace }}
        remoteSelector:
          {{ .remoteSelector | toYaml | nindent 10 }}
        port: {{ .port }}
        {{- else }}
        remoteGenerated: {{ .remoteGenerated }}
        {{- end }}
        description: {{ .description }}
      {{- end }}
